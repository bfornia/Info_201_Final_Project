lower_numbers <- 500:699
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
all_numbers
?as.Date
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- as.Date(sys.Date)
Sys.Date()
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- as.Date
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- Sys.Date()
today
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- as.Date(Sys.Date())
today
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- as.Date(Sys.Date(), format)
today
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- as.Date(Sys.Date(), format = "%B %d %Y")
today
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- as.Date(Sys.Date(), format = "%B %d %Y")
today
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- as.Date(Sys.Date())
# Create a variable `summer_break` that represents the first day of summer break
# (June 14, 2019). Make sure to use the `as.Date` function again
summer_break <- as.Date("June 14, 2019")
# Create a variable `summer_break` that represents the first day of summer break
# (June 14, 2019). Make sure to use the `as.Date` function again
summer_break <- as.Date("14june2019")
# Create a variable `summer_break` that represents the first day of summer break
# (June 14, 2019). Make sure to use the `as.Date` function again
summer_break <- as.Date(June 14, 2019)
# Create a variable `summer_break` that represents the first day of summer break
# (June 14, 2019). Make sure to use the `as.Date` function again
summer_break <- as.Date(June 14 2019)
# Create a variable `summer_break` that represents the first day of summer break
# (June 14, 2019). Make sure to use the `as.Date` function again
summer_break <- as.Date(14jun2019)
# Create a variable `summer_break` that represents the first day of summer break
# (June 14, 2019). Make sure to use the `as.Date` function again
summer_break <- as.Date('14jun2019')
# Create a variable `summer_break` that represents the first day of summer break
# (June 14, 2019). Make sure to use the `as.Date` function again
summer_break <- as.Date(14jun2019)
# Create a variable `summer_break` that represents the first day of summer break
# (June 14, 2019). Make sure to use the `as.Date` function again
summer_break <- as.Date(14jun2019, "%d%b%Y")
# Create a variable `summer_break` that represents the first day of summer break
# (June 14, 2019). Make sure to use the `as.Date` function again
summer_break<- as.Date(14062019, "%d%b%Y")
# Create a variable `summer_break` that represents the first day of summer break
# (June 14, 2019). Make sure to use the `as.Date` function again
summer_break<- as.Date(2019-14-06)
help(As.date)
??as.Date
?as.Date
# Create a variable `summer_break` that represents the first day of summer break
# (June 14, 2019). Make sure to use the `as.Date` function again
summer_break <- as.Date("June 14, 2019", format = "%B %d, %Y")
summer_break
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- summer_break - today
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- as.Date(summer_break) - as.Date(today)
days_to_break
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- summer_break - today
days_to_break
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- Sys.Date()
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- summer_break - today
days_to_break
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- as.Date(Sys.Date())
?function
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
?function
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(N, new_age, string){
paste0("In " N "days I'll be " new age)
string <- my_introduction
}
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(N, new_age, string){
paste0("In " N "days I'll be " new age)
string <- my_introduction
}
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(N, new_age, string) {
paste0("In " N "days I'll be " new age)
string <- my_introduction
}
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(N, new_age, string) {
paste0("In " N "days I'll be " new_age)
string <- my_introduction
}
paste0(make_introduction(MacKenzie, 20), "In " N "days I'll be " new_age)
string <- paste0("In " N "days I'll be " new_age)
string <- paste0("In " days "days I'll be " new_age)
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(days, new_age, string) {
string <- paste0("In " days "days I'll be " new_age)
}
make_introduction("mac", 5)
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, bday) {
paste0(
make_introduction(name, age),
"In 30 days I'll be 21"
)
}
make_birthday_intro()
paste0(
make_introduction(name, age),
"In 30 days I'll be 21"
)
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, bday) {
paste0(
make_introduction(name, age),
"In" bday "days I'll be 21."
)
}
paste0(
make_introduction(name, age),
"In" bday "days I'll be 21."
)
mmake_birthday
make_birthday_intro(MacKenzie, 20, 30)
make_birthday_intro("Mackenzie", 20, 30)
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, b_day) {
paste0(
make_introduction(name, age),
" In" b_day "days I'll be 21."
)
}
make_birthday_intro("Mackenzie", 20, 30)
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, b_day) {
paste0(
make_introduction(name, age) ,
" In" b_day "days I'll be 21."
)
}
make_birthday_intro("MacKenzie", 20, 30)
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, 30)
library("stringr")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, b_day) {
paste0(
make_introduction(name, age) ,
" In {N} days I'll be 21."
)
}
make_birthday_intro("MacKenzie", 20, 30)
make_birthday_intro("MacKenzie", 22, 30)
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, b_day) {
paste0(
make_introduction(name, age) ,
" In {N} days I'll be", age + 1, "."
)
}
make_birthday_intro("MacKenzie", 22, 30)
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, b_day) {
days_until_birthday <- as.Date(b_day) - Sys.Date()
paste0(
make_introduction(name, age) ,
" In ", days_until_birthday, "days I'll be ", age + 1, "."
)
}
make_birthday_intro("MacKenzie", 22, "2019-02-21")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, b_day) {
days_until_birthday <- as.Date(b_day) - Sys.Date()
paste0(
make_introduction(name, age) ,
" In ", days_until_birthday, " days I'll be ", age + 1, "."
)
}
make_birthday_intro("MacKenzie", 22, "2019-02-21")
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2019-02-21")
my_bday_intro
?Sys.time
?gsub
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(string){
gsub("[:digit:]", "", string)
}
remove_digits(my_bday_intro""
remove_digits(my_bday_intro)
my_bday_intro
?gsub
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(string){
sub("[:digit:]", "", string)
}
remove_digits(my_bday_intro)
?stringr
?str_replace_all
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(string){
str_replace_all(string, "[:digit:]", "")
}
remove_digits(my_bday_intro)
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("POLS 447", "INFO 201", "SPAN 202"))
# view `midwest` dataset
View(midwest)
library("shiny")
library("dplyr")
library("plotly")
library("ggplot2")
# view `midwest` dataset
View(midwest)
values <- colnames(midwest)
# Build scatter plot file
build_scatter <- function(data, search = "", xvar = input$feature, yvar = "poptotal") {
xmax <- max(data[, xvar]) * 1.2
ymax <- max(data[, yvar]) * 1.2
# create plot
ggplot(data = midwest, mapping = aes_string(x = "poptotal", y = input$feature, color = "blue")) +
geompoint() %>%
layout(xaxis = list(range = c(0, xmax), title = "Total Population in County"),
yaxis = list(range = c(0, ymax), ttle = "Percent of Population")) %>%
return()
}
# Define `ui` variable
shinyUI(navbarPage("Poverty in the Midwest", tabPanel(
"Scatter",
# Add a titlePanel to your tab
titlePanel("Percent White vs. Percent Below Poverty per State"),
# Create a sidebar layout for this tab (page)
sidebarLayout(sidebarPanel(
# Make a textInput widget for searching for a state in your scatter plot
selectInput(inputId = "feature",
label = "Choose a State",
choices = values[12:16]
),
# Create a main panel, in which you should display your plotly Scatter plot
mainPanel(
plotlyOutput("scatter")
))))))
# Define `ui` variable
shinyUI(navbarPage("Poverty in the Midwest", tabPanel(
"Scatter",
# Add a titlePanel to your tab
titlePanel("Percent White vs. Percent Below Poverty per State"),
# Create a sidebar layout for this tab (page)
sidebarLayout(sidebarPanel(
# Make a textInput widget for searching for a state in your scatter plot
selectInput(inputId = "feature",
label = "Choose a State",
choices = values[12:16]
),
# Create a main panel, in which you should display your plotly Scatter plot
mainPanel(
plotOutput("scatter")
))))))
# Define `ui` variable
shinyUI(navbarPage("Poverty in the Midwest", tabPanel(
"Scatter",
# Add a titlePanel to your tab
titlePanel("Percent White vs. Percent Below Poverty per State"),
# Create a sidebar layout for this tab (page)
sidebarLayout(sidebarPanel(
# Make a textInput widget for searching for a state in your scatter plot
selectInput(inputId = "feature",
label = "Choose a State",
choices = values[12:16]
),
# Create a main panel, in which you should display your plotly Scatter plot
mainPanel(
plotOutput("scatter")
))))))
# Define `ui` variable
shinyUI(navbarPage("Poverty in the Midwest", tabPanel(
"Scatter",
# Add a titlePanel to your tab
titlePanel("Percent White vs. Percent Below Poverty per State"),
# Create a sidebar layout for this tab (page)
sidebarLayout(sidebarPanel(
# Make a textInput widget for searching for a state in your scatter plot
selectInput(inputId = "feature",
label = "Choose a State",
choices = values[12:16]
),
# Create a main panel, in which you should display your plotly Scatter plot
mainPanel(
plotOutput(outputId = "scatter")
))))))
# Define `ui` variable
shinyUI(navbarPage("Poverty in the Midwest", tabPanel(
"Scatter",
# Add a titlePanel to your tab
titlePanel("Percent White vs. Percent Below Poverty per State"),
# Create a sidebar layout for this tab (page)
sidebarLayout(sidebarPanel(
# Make a textInput widget for searching for a state in your scatter plot
selectInput(inputId = "feature",
label = "Choose a State",
choices = values[12:16],
),
# Create a main panel, in which you should display your plotly Scatter plot
mainPanel(
plotOutput(outputId = "scatter")
))))))
# Define `ui` variable
shinyUI(navbarPage("Poverty in the Midwest", tabPanel(
"Scatter",
# Add a titlePanel to your tab
titlePanel("Percent White vs. Percent Below Poverty per State"),
# Create a sidebar layout for this tab (page)
sidebarLayout(sidebarPanel(
# Make a textInput widget for searching for a state in your scatter plot
selectInput(inputId = "feature",
label = "Choose a State",
choices = values[12:16])
),
# Create a main panel, in which you should display your plotly Scatter plot
mainPanel(
plotOutput(outputId = "scatter")
)))))
runApp('C:/Users/MacKenzie/Desktop/Info201/a8-mhwood22')
# Build scatter plot file
build_scatter <- function(data, search = "", xvar = input$feature, yvar = "poptotal") {
xmax <- max(data[, xvar]) * 1.2
ymax <- max(data[, yvar]) * 1.2
# create plot
ggplot(data = midwest, mapping = aes_string(x = data[, xvar], y = data[, yvar], color = "blue")) +
geompoint() %>%
layout(xaxis = list(range = c(0, xmax), title = "Total Population in County"),
yaxis = list(range = c(0, ymax), title = "Percent of Population")) %>%
return()
}
runApp('C:/Users/MacKenzie/Desktop/Info201/a8-mhwood22')
shiny::runApp('C:/Users/MacKenzie/Desktop/Info201/a8-mhwood22')
?titlePanel
library(shiny)
?titlePanel
# Define UI for application that draws a histogram
shinyUI(navbarPage("Best University for You",
tabPanel("Introduction",
# Application title
titlePanel("Where does it pay to go to school?")
),
# Sidebar with a slider input for number of bins
# Show a plot of the generated distribution
mainPanel(
p("On this website we are using data from The Wall Street Journal that provides information about universities in the US and the average salaries people receive from each university. Using this information, students, parents, and current university students can gain information in order to make a more informed decision about majors you want to pursue and the university/type of university you might be interested in attending.
You will be able to take a look at salary information based on college type (liberal, Ivy, state, etc.), region, and academic major.  You will also have the chance to compare the average salaries between two different universities within a region.
")
)
),
tabPanel("Distribution of Poverty by Race",
# Add a titlePanel to your tab
titlePanel("Percent of Total Population Below Poverty (by county)"),
# Create a sidebar layout for this tab (page)
sidebarLayout(sidebarPanel(
# Make a selectInput widget for select a population in your scatter plot
selectInput(inputId = "feature",
label = "Choose a Population (by race)",
choices = values[12:16]),
# Make a radioButtons widget for choose the color of the points in the plot
radioButtons(inputId = "color_choice", label = "Color",
choices = ccolors)
),
# Create a main panel, in which you should display the scatter plot
mainPanel(
plotOutput(outputId = "scatter")
))),
)
setwd("C:/Users/MacKenzie/Desktop/Info201/Info_201_Final_Project")
source("data/degrees-that-pay-back.csv", row.names = FALSE)
source("data/degrees-that-pay-back.csv")
source("data/degrees-that-pay-back.csv")
library(dplyr)
degrees <- read.csv("data/degrees-that-pay-back.csv", stringsAsFactors = FALSE)
regions <- read.csv("data/salaries-by-region.csv", stringsAsFactors = FALSE)
college_types <- read.csv("data/salaries-by-college-type", stringsAsFactors = FALSE)
college_types <- read.csv("data/salaries-by-college-type.csv", stringsAsFactors = FALSE)
college_regions <- read.csv("data/salaries-by-region.csv", stringsAsFactors = FALSE)
View(college_regions)
# filter data
regions <- select(college_regions, Region) %>% group_by(Region) %>% summarise()
View(regions)
View(regions)
university <- select(college_regions, School.Name)
runApp()
runApp()
runApp()
